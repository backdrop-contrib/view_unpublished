<?php

/**
 * @file
 * Main functions and hook implementations of the View Unpublished module.
 */

/**
 * Implements hook_permission().
 */
function view_unpublished_permission() {
  $perms = array(
    'view any unpublished content' => array(
      'title' => t('View any unpublished content'),
    ),
  );
  // Generate standard node permissions for all applicable node types.
  foreach (node_permissions_get_configured_types() as $type) {
    $info = node_type_get_type($type);
    $type = check_plain($info->type);
    $perms["view any unpublished $type content"] = array(
      'title' => t('%type_name: View any unpublished content', array('%type_name' => $info->name)),
    );
  }
  return $perms;
}

function view_unpublished_list_permissions($type) {
  
}

/**
 * Implements hook_node_access_records().
 */
function view_unpublished_node_access_records($node) {
  // We only care about the node if is unpublished. If not, it is
  // treated just like any other node and we completely ignore it.
  if ($node->status == 0) {
    $grants = array();
    // Unpublished nodes should be viewable to all editors.
    $grants[] = array(
      'realm' => 'view_unpublished_content',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    $grants[] = array(
      'realm' => 'view_unpublished_' . $node->type . '_content',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    return $grants;
  }
}

/**
 * Implements hook_node_grants().
 */
function view_unpublished_node_grants($account, $op) {
  $grants = array();
  if ($op == 'view') {
    if (user_access('view any unpublished content', $account)) {
      $grants['view_unpublished_content'] = array(1);
      return $grants;
    }
    foreach(node_permissions_get_configured_types() as $type) {
      if (user_access("view any unpublished $type content", $account)) {
        $grants['view_unpublished_' . $type . '_content'] = array(1);
      }
    }
  }
  return $grants;
}

/**
 * Implementation of hook_views_data_alter()
 */
function view_unpublished_views_data_alter(&$data) {
  // published status + extra handler is taken over by our handler
  $data['node']['status_extra']['filter']['handler'] = 'view_unpublished_handler_filter_node_status';
}


/**
 * Implementation of hook_views_handlers()
 */
function view_unpublished_views_handlers() {
  return array(
    'info' => array(
      'path' => drupal_get_path('module', 'view_unpublished'),
    ),
    'handlers' => array(
      'view_unpublished_handler_filter_node_status' => array(
        'parent' => 'views_handler_filter_node_status',
      ),
    ),
  );
}

/**
 * Implementation of hook_views_query_substitutions().
 */
function view_unpublished_views_query_substitutions() {
  foreach (node_type_get_types() as $type => $name) {
    $substitutions["***VIEWUNPUBLISHED_$type***"] = intval(user_access('view any unpublished ' . $type . ' content'));
  }

  return $substitutions;
}
